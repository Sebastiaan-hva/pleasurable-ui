

.gifts-grid{
    margin-top:.5em;
    display:grid;
    grid-template-rows: repeat(5, minmax(auto, 100%));
    min-width:400px;
    max-width:50vw;
    gap:1em;
}

.detail-top{
    margin:2.5em;
}

@media (width > 600px) {
    .gifts-grid{
        margin-left:10vw;
        margin-right:10vw;
    }
}
@media (width > 800px) {
    .gifts-grid{
        margin-left:25vw;
        margin-right:25vw;
    }
}
.grid-item { 
    margin: 0; 
    padding: 5px; 
    border-bottom: 1px solid #000;
}

.grid-item:nth-of-type(1) {
    text-align:center;
}


.detail-main-image{
    /* position: relative; */
    margin-left:15vw;
    margin-right:15vw;
}

.article-why-this-gift{
/* background-color: red; */
}

.article-safe-to-give{

}

.article-where-to-find-it{

}

.site{
    grid-area:site;
}

.price{
    grid-area:price;
}

.article-where-to-find-it-grid h5{
    grid-area:milledoni;
}
.article-where-to-find-it-grid form{
    grid-area:rating
}

.article-where-to-find-it-grid{
margin-left:2%;
display:grid;
grid-template-columns: 20vw 1fr;
grid-template-areas: 
'site  price'
'milledoni  rating'
}


/* rating */

			main > * * {
            padding: 0;
			margin: 0;
			box-sizing: border-box;
			}

			@supports selector(::after) and selector(:has(*)) and (--custom: properties) {
			.container {
				display: flex;
				gap: 1rem;
			}

			label {
				--star-empty: url(../assets/gift-empty.svg);
				--star-filled: url(../assets/gift.svg);
				display: flex;
				align-items: center;
				flex-wrap: wrap;
				flex-direction: column;
			}

			input[type="radio"] {
				height: 2rem;
				padding: 0 0.25rem;
				aspect-ratio: 1;
				display: grid;
				place-content: center;
				cursor: pointer;
				appearance: none;
			}

			input[type="radio"]::after {
				content: "";
				background: var(--star-empty) no-repeat center;
				height: inherit;
				aspect-ratio: 1;
				transition: background-image 0.3s ease;
				z-index: 1;
				cursor: pointer;
			}

			.container:has(input[type="radio"]:is(:hover, :focus, :checked)) label:has(input[type="radio"]:is(:hover, :focus, :checked)) ~ label input[type="radio"]::after {
				background: var(--star-empty);
			}
			input[type="radio"]:is(:hover, :focus, :checked)::after,
			.container:has(input[type="radio"]:is(:hover, :focus, :checked)) label:not(:has(input[type="radio"]:is(:hover, :focus, :checked)) ~ label) input[type="radio"]::after {
				background: var(--star-filled);
			}
		}

/* animatie op saved list button */

.list-button {
  position: relative;
  cursor: pointer;
  user-select: none;
}

@media (max-width:1239px) {
	.icon{
		display:none;
	}
}

@media (min-width: 1240px) {
	#list-button-text {
    	animation: none;
}

.list-button:hover #list-button-text {
    animation: wiggle 1s ease-in-out forwards;
}

#list-button-text.morphed {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.5s ease;
}

.list-button .icon {
    position: absolute;
    top: 50%;
    left: 35%; 
    width: 32px;
    height: 32px;
    transform: translateY(-50%);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.5s ease;
    z-index: 10;
  }

#list-button-text.morphed + .icon {
    opacity: 1;
    pointer-events: auto;
  }
}


@keyframes wiggle {
	0%, 100% { transform: rotate(0deg); }
	15% { transform: rotate(15deg); }
	30% { transform: rotate(-15deg); }
	45% { transform: rotate(10deg); }
	60% { transform: rotate(-10deg); }
	75% { transform: rotate(5deg); }
	90% { transform: rotate(-5deg); }
}


::view-transition-old(root), ::view-transition-new(root) {
  	animation-duration: 0.3s;
}

::view-transition-old(root) {
  	animation-name: fadeOut;
}

::view-transition-new(root) {
  	animation-name: fadeIn;
}

@keyframes fadeOut {
  	from { opacity: 1; }
  	to { opacity: 0; }
}

@keyframes fadeIn {
  	from { opacity: 0; }
  	to { opacity: 1; }
}